# Questo e' la descrizione delle API che vengono esposte da dati.gov.it.
# Le API sono pubbliche
swagger: '2.0'
info:
  title: dati.gov.it API
  description: Consume dati.gov.it API
  version: "BETA"
  termsOfService: http://termofservice
  contact:
    name: team digitale
    url: https://teamdigitale.governo.it
  license:
    name: Creative Commons 4.0 International
    url: http://creativecommons.org/licenses/by/4.0/
#host : XXX.XXX.XX.XXX:8000
host: datipubblici.default.svc.cluster.local:9000
#host: localhost:9000
# will be prefixed to all paths
basePath: /dati-gov/v1
produces:
  - application/json
consumes:
  - application/json
paths:
  "/monitor/catalogs":
    get:
      summary: Name of all catalogs
      description:
        List of names of all catalogs
      tags:
        - Monitor
      operationId: monitorcatalogs
      parameters:
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        200:
          description: An array of Catalog
          schema:
            type: array
            items:
              $ref: '#/definitions/Catalog'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/catalogs/{catalogName}/count":
    get:
      tags:
      - Monitor
      summary: Finds number of datasets per catalogue
      description: Finds number of datasets per catalogue
      operationId: catalogDatasetCount
      parameters:
      - name: catalogName
        in: path
        description: Name of catalog
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        '400':
          description: Catalog not exists
        '404':
          description: Catalog not exists
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/catalogs/{catalogName}/distribution_formats":
    get:
      tags:
      - Monitor
      summary: Distribution of datasets per catalogue grouped by format
      description: Distribution of datasets per catalogue grouped by format
      operationId: catalogDistrubutionFormat
      parameters:
      - name: catalogName
        in: path
        description: Name of catalog
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/catalogs/{catalogName}/distribution_groups":
    get:
      tags:
      - Monitor
      summary: Distribution of datasets per catalogue grouped by group title
      description: Distribution of datasets per catalogue grouped by group title
      operationId: catalogDistrubutionGroups
      parameters:
      - name: catalogName
        in: path
        description: Name of catalog
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/catalogs/{catalogName}/distribution_licenses":
    get:
      tags:
      - Monitor
      summary: Distribution of datasets per catalogue grouped by license
      description: Distribution of datasets per catalogue grouped by license
      operationId: catalogDistributionLicense
      parameters:
      - name: catalogName
        in: path
        description: Name of catalog
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/catalogs/{catalogName}/broken_links":
    get:
      tags:
      - Monitor
      summary: Broken links per catalogue
      description: Broken links per catalogue
      operationId: catalogBrokenLinks
      parameters:
      - name: catalogName
        in: path
        description: Name of catalog
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/BrokenLink"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/dati_gov/broken_links":
    get:
      tags:
      - Monitor
      summary: List of all broken links
      description: List of all broken links
      operationId: allBrokenLinks
      parameters:
        - name: apikey
          in: query
          description: Api key
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/BrokenLink"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/dati_gov/count":
    get:
      tags:
      - Monitor
      summary: List of catalogs name and number of dataset
      description: List of catalogs name and number of dataset
      operationId: allDatasets
      parameters:
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/dati_gov/distribution_formats":
    get:
      tags:
      - Monitor
      summary: All resources grouped by format
      description: All resources grouped by format
      operationId: allDistributionFormats
      parameters:
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/dati_gov/distribution_groups":
    get:
      tags:
      - Monitor
      summary: All resources grouped by group title
      description: All resources grouped by group title
      operationId: allDistributionGroups
      parameters:
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/monitor/dati_gov/distribution_licenses":
    get:
      tags:
      - Monitor
      summary: All resources grouped by license
      description: All resources grouped by license
      operationId: allDistributionLiceses
      parameters:
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            type: array
            items:
              "$ref": "#/definitions/Distribution"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/elasticsearch/search":
    post:
      tags:
      - elasticsearch
      summary: search datasets, dashboards and stories
      operationId: searchFullText
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: filters
        in: body
        description: filter to use in search
        required: true
        schema:
          $ref: '#/definitions/Filters'
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SearchResult'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/elasticsearch/home":
    get:
      tags:
      - elasticsearch
      summary: return last 3 dataset, dashboard, stories and the count of resource
      operationId: searchLast
      produces:
      - application/json
      responses:
        200:
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SearchResult'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/public/elasticsearch/home":
      get:
        tags:
        - elasticsearch
        summary: return last 3 dataset, dashboard, stories and the count of resource
        operationId: searchLastPublic
        produces:
        - application/json
        responses:
          200:
            description: Successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/SearchResult'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/public/elasticsearch/search":
      post:
        tags:
        - elasticsearch
        summary: search datasets, dashboards and stories
        operationId: searchFullTextPublic
        consumes:
        - application/json
        produces:
        - application/json
        parameters:
        - name: filters
          in: body
          description: filter to use in search
          required: true
          schema:
            $ref: '#/definitions/Filters'
        responses:
          200:
            description: Successful operation
            schema:
              type: array
              items:
                $ref: '#/definitions/SearchResult'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/dashboard/create/{tableName}/{fileType}":
    post:
      tags:
      - Dashboard
      summary: Create a table for metabase visualization
      operationId: createTable
      consumes:
         - multipart/form-data
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload
      - name: tableName
        in: path
        description: Name of table
        required: true
        type: string
      - name: fileType
        in: path
        description: csv o json enum not working
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/dashboard/snapshot/{snapshot_id}":
      post:
        tags:
        - Dashboard
        summary: Upload snapshot
        operationId: createSnapshot
        consumes:
           - multipart/form-data
        parameters:
        - in: formData
          name: upfile
          type: file
          required: true
          description: The file to upload
        - name: snapshot_id
          in: path
          description: Snapshot identifier
          required: true
          type: string
        - name: apikey
          in: query
          description: Api key
          required: true
          type: string
        responses:
          '200':
            description: successful operation
            schema:
              "$ref": "#/definitions/Success"
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/dashboard/update/{tableName}/{fileType}":
    put:
      tags:
      - Dashboard
      summary: Overwrite a table for metabase visualization
      operationId: updateTable
      consumes:
         - multipart/form-data
      parameters:
      - in: formData
        name: upfile
        required: true
        type: file
        description: The file to upload
      - name: tableName
        in: path
        description: Name of table
        required: true
        type: string
      - name: fileType
        in: path
        description: csv o json enum not working
        required: true
        type: string
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/dashboard/tables":
    get:
      tags:
      - Dashboard
      summary: List of tables for dashboard visualization
      operationId: dashboardTables
      produces:
       - application/json
      parameters:
      - name: apikey
        in: query
        description: Api key
        required: true
        type: string
      responses:
        200:
          description: An array of Catalog
          schema:
            type: array
            items:
              $ref: '#/definitions/Catalog'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/dashboard/iframes":
      get:
        tags:
        - Dashboard
        summary: List of iframes for dashboard visualization
        operationId: dashboardIframes
        produces:
         - application/json
        responses:
          200:
            description: An array of iFrames
            schema:
              type: array
              items:
                $ref: '#/definitions/DashboardIframes'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/dashboard/iframesByName/{tableName}":
        get:
          tags:
          - Dashboard
          summary: List of iframes for dashboard visualization
          operationId: iframesByTableName
          produces:
           - application/json
          parameters:
          - name: tableName
            in: path
            description: Table name
            required: true
            type: string
          responses:
            200:
              description: An array of iFrames
              schema:
                type: array
                items:
                  $ref: '#/definitions/DashboardIframes'
            default:
              description: Unexpected error
              schema:
                $ref: '#/definitions/Error'
  "/dashboard/iframesbyorg/{orgName}":
      get:
        tags:
        - Dashboard
        summary: List all iframes of an organization for dashboard visualization
        operationId: dashboardIframesbyorg
        produces:
         - application/json
        parameters:
        - name: orgName
          in: path
          description: organization name
          required: true
          type: string
        responses:
          200:
            description: An array of iFrames
            schema:
              type: array
              items:
                $ref: '#/definitions/DashboardIframes'
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/dashboards":
    get:
      tags:
      - Dashboard
      summary: Get Dashboards
      operationId: dashboards
      produces:
        - application/json
      consumes:
         - application/json
      parameters:
        - name: status
          in: query
          description: possible status (0,1,2) 2 = public
          required: false
          type: integer
          format: int32
        - name: page
          in: query
          description: number of the page
          required: false
          type: integer
          format: int32
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          minimum: 1
          maximum: 500
      responses:
        200:
          description: Success Message
          schema:
            type: array
            items:
              $ref: '#/definitions/Dashboard'
        default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/public/dashboards":
    get:
      tags:
        - Dashboard
      summary: Get Open Data Dashboards
      operationId: publicDashboards
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: org
          in: query
          description: organization
          required: false
          type: string
        - name: page
          in: query
          description: number of the page
          required: false
          type: integer
          format: int32
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          minimum: 1
          maximum: 500
      responses:
        200:
          description: Success Message
          schema:
            type: array
            items:
              $ref: '#/definitions/Dashboard'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/save/dashboards":
    post:
      tags:
      - Dashboard
      summary: Save Dashboard
      operationId: savedashboard
      produces:
        - application/json
      consumes:
         - application/json
      parameters:
      - name: dashboard
        in: body
        description: Dashboard to Save
        required: true
        schema:
          $ref: '#/definitions/Dashboard'
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/dashboards/{dashboard_id}":
    get:
      tags:
      - Dashboard
      summary: get dashboard by id
      operationId: dashboardsbyid
      consumes:
         - application/json
      produces:
         - application/json
      parameters:
      - name: dashboard_id
        in: path
        description: id of dashboard
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Dashboard"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/public/dashboards/{dashboard_id}":
      get:
        tags:
        - Dashboard
        summary: get dashboard by id, only open data
        operationId: publicDashboardsById
        consumes:
           - application/json
        produces:
           - application/json
        parameters:
        - name: dashboard_id
          in: path
          description: id of dashboard
          required: true
          type: string
        responses:
          '200':
            description: successful operation
            schema:
              "$ref": "#/definitions/Dashboard"
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/delete/dashboards/{dashboard_id}":
    delete:
      tags:
      - Dashboard
      summary: delete dashboard by id
      operationId: deletedashboard
      consumes:
         - application/json
      produces:
         - application/json
      parameters:
      - name: dashboard_id
        in: path
        description: id of dashboard
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/user-stories":
    get:
      tags:
      - UserStory
      summary: Get UserStories
      operationId: stories
      produces:
        - application/json
      consumes:
         - application/json
      parameters:
        - name: status
          in: query
          description: possible status (0,1,2) 2 = public
          required: false
          type: integer
          format: int32
        - name: page
          in: query
          description: number of the page
          required: false
          type: integer
          format: int32
        - name: limit
          in: query
          description: maximum number of results to return
          required: false
          type: integer
          format: int32
          minimum: 1
          maximum: 500
      responses:
        200:
          description: Success Message
          schema:
            type: array
            items:
              $ref: '#/definitions/UserStory'
        default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/public/user-stories":
      get:
        tags:
        - UserStory
        summary: Get Open Data UserStories
        operationId: publicStories
        produces:
          - application/json
        consumes:
           - application/json
        parameters:
          - name: org
            in: query
            description: organization
            required: false
            type: string
          - name: page
            in: query
            description: number of the page
            required: false
            type: integer
            format: int32
          - name: limit
            in: query
            description: maximum number of results to return
            required: false
            type: integer
            format: int32
            minimum: 1
            maximum: 500
        responses:
          200:
            description: Success Message
            schema:
              type: array
              items:
                $ref: '#/definitions/UserStory'
          default:
              description: Unexpected error
              schema:
                $ref: '#/definitions/Error'
  "/save/user-stories":
    post:
      tags:
      - UserStory
      summary: Save UserStory
      operationId: savestories
      produces:
        - application/json
      consumes:
         - application/json
      parameters:
      - name: story
        in: body
        description: Dashboard to Save
        required: true
        schema:
          $ref: '#/definitions/UserStory'
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/user-stories/{story_id}":
    get:
      tags:
      - UserStory
      summary: get UserStory by id
      operationId: storiesbyid
      consumes:
         - application/json
      produces:
         - application/json
      parameters:
      - name: story_id
        in: path
        description: id of dashboard
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/UserStory"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/public/user-stories/{story_id}":
      get:
        tags:
        - UserStory
        summary: get UserStory by id, only open data
        operationId: publicStoriesbyid
        consumes:
           - application/json
        produces:
           - application/json
        parameters:
        - name: story_id
          in: path
          description: id of UserStory
          required: true
          type: string
        responses:
          '200':
            description: successful operation
            schema:
              "$ref": "#/definitions/UserStory"
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/Error'
  "/delete/user-stories/{story_id}":
    delete:
      tags:
      - UserStory
      summary: delete by id
      operationId: deletestory
      consumes:
         - application/json
      produces:
         - application/json
      parameters:
      - name: story_id
        in: path
        description: id of dashboard
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/plot/{iframe_id}/{sizexsize}":
    get:
      tags:
      - Snapshots
      summary: get snapshots
      operationId: snapshotbyid
      parameters:
      - name: iframe_id
        in: path
        description: id of iframes
        required: true
        type: string
      - name: sizexsize
        in: path
        description: sizexsize must be one of the following  100x100 400x300 280x500 356x280
        required: true
        type: string
      responses:
        200:
          description: The JWT token
          schema:
            type: string
            format: base64
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/infer/system_name/kylo":
    get:
      tags:
      - Ingestion Form
      summary: get system name
      operationId: kyloSystemName
      parameters:
      - name: name
        in: query
        description: name to convert in system name
        required: true
        type: string
      responses:
        '200':
          description: string representing a system name in kylo
          schema:
            type: object
            properties:
              system_name:
                type: string
  "/kylo/feeds/{feed_name}":
    get:
      tags:
      - Kylo
      summary: get feed info
      operationId: kyloFeedByName
      parameters:
      - name: feed_name
        in: path
        description: Feed name made by ORG.FEEDNAME
        required: true
        type: string
      responses:
        '200':
          description: Feed Info
          schema:
              $ref: '#/definitions/KyloFeed'
  "/infer/schema/{fileType}":
    post:
      tags:
      - Ingestion Form
      summary: Infer schema
      operationId: inferschema
      consumes:
         - multipart/form-data
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload
      - name: fileType
        in: path
        description: csv o json enum not working
        required: true
        type: string
      responses:
        '200':
          description: successful operation
          schema:
              $ref: '#/definitions/Inferred'
  "/infer/kylo/{fileType}":
    post:
      tags:
      - Ingestion Form
      summary: Infer schema from kylo
      operationId: kyloInferschema
      consumes:
         - multipart/form-data
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload
      - name: fileType
        in: path
        description: csv o json enum not working
        required: true
        type: string
      responses:
        '200':
          description: string representing a non static schema in json format
          schema:
            type: string
  "/infer/ws/kylo/{url}/{file_type}":
      post:
        tags:
        - Ingestion Form
        summary: Infer schema from kylo
        operationId: wsKyloInferschema
        produces:
          - application/json
        consumes:
           - application/json
        parameters:
        - name: url
          in: path
          description: url of webservice to save infer and give to kylo
          required: true
          type: string
        - name: file_type
          in: path
          description: file type at the moment works for csv and json
          required: true
          type: string
        - name: credentials
          in: body
          description: user credentials
          required: true
          schema:
            "$ref": "#/definitions/Credentials"
        responses:
          '200':
            description: string representing a non static schema in json format
            schema:
              type: string
  "/save/data/{path_to_save}":
    post:
      tags:
      - Ingestion Form
      summary: Save data if file complete and less than 10MB
      operationId: saveDataForNifi
      consumes:
         - multipart/form-data
      parameters:
      - in: formData
        name: upfile
        type: file
        required: true
        description: The file to upload
      - name: path_to_save
        in: path
        description: encoded path to save
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/domain":
    get:
      tags:
        - Domains
      summary: Get all domain in the collection settings
      description: Get all domain in the collection settings
      operationId: getDomains
      responses:
        200:
          description: Arrray of domains
          schema:
            type: array
            items:
              type: string
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/settings":
    get:
          tags:
          - Settings
          summary: Get Settings
          operationId: settingsByName
          produces:
            - application/json
          parameters:
            - name: domain
              in: query
              description: the domain of the organization
              required: true
              type: string
          responses:
            200:
              description: Settings of the organization
              schema:
                  $ref: '#/definitions/Settings'
            400:
              description: error in read setting
              schema:
                $ref: '#/definitions/Error'
            default:
              description: Unexpected error
              schema:
                $ref: '#/definitions/Error'
  "/settings/{domain}":
    delete:
      tags:
      - Settings
      summary: Delete Settings
      operationId: deleteSettings
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: domain
          in: path
          description: the domain of the organization
          type: string
          required: true
        - name: settings
          in: body
          description: the settings of the organization
          required: true
          schema:
            $ref: '#/definitions/Settings'
      responses:
        200:
          description: Settings delete
          schema:
            $ref: '#/definitions/Settings'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
      - Settings
      summary: Save Settings
      operationId: saveSettings
      consumes:
        - application/json
      parameters:
      - name: domain
        in: path
        description: the domain of the organization
        required: true
        type: string
      - name: settings
        in: body
        description: settings to save
        required: true
        schema:
          $ref: '#/definitions/Settings'
      responses:
        200:
          description: successful operation
          schema:
            "$ref": "#/definitions/Success"
        400:
          description: error in object settings
          schema:
            "$ref": "#/definitions/Error"
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/superset/table/{dataset_name}":
    get:
      tags:
      - Superset
      summary: Get url of superset table from datasetname
      operationId: supersetTableFromDataset
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - name: dataset_name
        in: path
        description: dataset name
        required: true
        type: string
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/SupersetUrl'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  "/metabase/table/{dataset_name}":
    get:
      tags:
      - Metabase
      summary: Is dataset on metabase
      operationId: isDatasetOnMetabase
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - name: dataset_name
        in: path
        description: dataset name
        required: true
        type: string
      responses:
        200:
          description: the dataset it can be visualized on metabase
          schema:
            type: object
            properties:
              is_on_metabase:
                type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'

definitions:
  Catalog:
    properties:
       name:
         type: string
         description: Name of catalog
  Distribution:
    type: object
    properties:
      label:
         type: string
         description: Label Name
      count:
         type: number
         format: float
         description: Number of items per label
  BrokenLink:
    type: object
    properties:
      label:
         type: string
         description: Label Name
      url:
         type: string
         description: Original url
      m_status:
         type : string
         description : TODO trasfom in enum ko or ok or ...
      name:
         type : string
         description : file name of resource
      rurl:
         type : string
         description : Url of resource
      dataset_url:
         type : string
         description : Url of dataset in dati.gov.it
      catalog_name:
         type : string
         description : Name of catalog
  Credentials:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  DashboardIframes:
    type: object
    properties:
      iframe_url:
        type: string
      origin:
        type: string
      title:
        type: string
      identifier:
        type: string
      table:
        type: string
      viz_type:
        type: string
  Filters:
    type: object
    properties:
      text:
        type: string
      index:
        type: array
        items:
          type: string
      org:
        type: array
        items:
          type: string
      theme:
        type: array
        items:
          type: string
      date:
        type: string
      status:
        type: array
        items:
          type: string
      order:
        type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  Success:
    type: object
    properties:
      message:
        type: string
      fields:
        type: string
  SearchResult:
    type: object
    properties:
      type:
        type: string
        description: type of the source
      source:
        type: string
        description: the source
      match:
        type: string
        description: the match result
  Dashboard:
    type: object
    properties:
      user:
        type: string
      layout:
        type: string
      widgets:
        type: string
      title:
        type: string
      status:
        type: integer
        format: int32
      id:
        type: string
      timestamp:
        type: string
        format: date-time
      subtitle:
        type: string
      pvt:
        type: string
      org:
        type: string
  Settings:
    type: object
    properties:
      theme:
        type: string
      headerLogo:
        type: string
      headerSiglaTool:
        type: string
      headerDescTool:
        type: string
      twitterURL:
        type: string
      mediumURL:
        type: string
      notizieURL:
        type: string
      forumURL:
        type: string
      footerLogoAGID:
        type: string
      footerLogoGov:
        type: string
      footerLogoDevITA:
        type: string
      footerNomeEnte:
        type: string
      footerPrivacy:
        type: string
      footerLegal:
        type: string
      organization:
        type: string
  UserStory:
    type: object
    properties:
      id:
        type: string
      user:
        type: string
      title:
        type: string
      pvt:
        type: string
      org:
        type: string
      published:
        type: integer
        format: int32
      subtitle:
        type: string
#      graph1:
#        $ref: '#/definitions/Graph'
#      text:
#        type: string
#      graph2:
#        $ref: '#/definitions/Graph'
#      footer:
#        type:
#          string
      layout:
        type: string
      widgets:
        type: string
      timestamp:
        type: string
        format: date-time
  Oid:
    type: object
    properties:
      $oid:
        type: string
  Image:
    type: object
    properties:
      url:
        type: string
      caption:
        type: string
  Graph:
    type: object
    properties:
      props:
        $ref: '#/definitions/Props'
      title:
        type: string
  Props:
    type: object
    properties:
      url:
        type: string
      identifier:
        type: string
      origin:
        type: string
  Inferred:
    type: object
    properties:
      separator:
        type: string
      format:
        type: string
      inferredType:
          type: array
          items:
            $ref: '#/definitions/InferredType'
  InferredType:
    type: object
    properties:
      column_name:
        type: string
      data:
        type: array
        items:
          type: string
      inferredType:
        type: array
        items:
          type: string
  KyloFeed:
    type: object
    required:
     - feed_name
     - state
     - active
     - updatedate
    properties:
      feed_name:
        type: string
      state:
        type: string
      active:
        type: boolean
      updatedate:
        type: integer
        format: int64
      has_job:
        type: boolean
      job_status:
        type: string
      job_created:
        type: integer
        format: int64
  SupersetUrl:
    type: object
    required:
     - id
     - name
     - url
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      url:
        type: string


